plugins {
    id 'com.android.application'
    id 'kotlin-android'
    alias(libs.plugins.ksp)
    id 'kotlin-kapt'
    id 'kotlin-parcelize'
    id 'com.google.dagger.hilt.android'
}

android {
    namespace libs.versions.applicationId.get()
    compileSdk libs.versions.compileSdkVersion.get().toInteger()

    signingConfigs {
        wanandroid {
            keyAlias 'wanandroid.keystore'
            keyPassword 'wanandroid'
            storeFile file('wanandroid.keystore')
            storePassword 'wanandroid'
        }
    }

    defaultConfig {
        applicationId libs.versions.applicationId.get()
        minSdk libs.versions.minSdkVersion.get().toInteger()
        targetSdk libs.versions.targetSdkVersion.get().toInteger()
        versionCode libs.versions.versionCode.get().toInteger()
        versionName libs.versions.versionName.get()
        multiDexEnabled true

        consumerProguardFiles "consumer-rules.pro"

        javaCompileOptions {
            annotationProcessorOptions {
                arguments += [
                        "room.schemaLocation":"$projectDir/schemas".toString(),
                        "room.incremental":"true",
                        "room.expandProjection":"true",
                        AROUTER_MODULE_NAME: project.getName()
                ]
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true // 移除无用的resource文件
            zipAlignEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.wanandroid
        }
        debug {//开发自己的debug包
            minifyEnabled false
            shrinkResources false // 移除无用的resource文件
            proguardFiles.clear() // 不混淆
            signingConfig signingConfigs.wanandroid
        }
    }


    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }
    buildFeatures {
        viewBinding true
    }

}

kapt {
    arguments {
        arg("AROUTER_MODULE_NAME", project.getName())
    }
    generateStubs = true
    useBuildCache = true
    javacOptions {
        option("-Xmaxerrs", 500)
    }
}

def isBuildModule = Boolean.valueOf(libs.versions.isBuildModule.get())

dependencies {

    implementation project(':common:base')
    implementation project(':common:service')
    if (!isBuildModule) {
        implementation project(":modules:content")
        implementation project(":modules:login")
        implementation project(":modules:home")
        implementation project(":modules:wechat")
        implementation project(":modules:sys")
        implementation project(":modules:square")
        implementation project(":modules:project")
//        implementation project(":modules:compose")
        implementation project(":modules:collect")
        implementation project(":modules:media")
    }

    implementation libs.bundles.room.bundles
    ksp libs.room.compiler

    implementation libs.bundles.other.bundles

    ksp libs.glide.compiler

    compileOnly libs.hilt
    kapt libs.hilt.compiler
}